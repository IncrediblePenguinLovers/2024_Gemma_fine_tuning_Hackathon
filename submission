import torch
from torch.utils.data import Dataset, DataLoader
from transformers import AutoTokenizer, AutoModelForSequenceClassification, AdamW, get_linear_schedule_with_warmup
from sklearn.model_selection import train_test_split
import numpy as np

# 1. 가상의 Gemma 토크나이저와 모델 (실제로는 다른 모델로 대체해야 함)
MODEL_NAME = "google/gemma-7b"  # 2. 실제 Gemma 모델 이름으로 대체 필요

class TextClassificationDataset(Dataset):
    def __init__(self, texts, labels, tokenizer, max_length):
        self.texts = texts
        self.labels = labels
        self.tokenizer = tokenizer
        self.max_length = max_length

    def __len__(self):
        return len(self.texts)

    def __getitem__(self, idx):
        text = self.texts[idx]
        label = self.labels[idx]

        encoding = self.tokenizer.encode_plus(
            text,
            add_special_tokens=True,
            max_length=self.max_length,
            return_token_type_ids=False,
            padding="max_length",
            truncation=True,
            return_attention_mask=True,
            return_tensors='pt',
        )

        return {
            'input_ids': encoding['input_ids'].flatten(),
            'attention_mask': encoding['attention_mask'].flatten(),
            'labels': torch.tensor(label, dtype=torch.long)
        }

def train(model, train_dataloader, val_dataloader, device, num_epochs=3):
    optimizer = AdamW(model.parameters(), lr=2e-5, correct_bias=False)
    total_steps = len(train_dataloader) * num_epochs
    scheduler = get_linear_schedule_with_warmup(
        optimizer,
        num_warmup_steps=0,
        num_training_steps=total_steps
    )
    
    for epoch in range(num_epochs):
        model.train()
        for batch in train_dataloader:
            input_ids = batch['input_ids'].to(device)
            attention_mask = batch['attention_mask'].to(device)
            labels = batch['labels'].to(device)

            outputs = model(input_ids, attention_mask=attention_mask, labels=labels)
            loss = outputs.loss
            loss.backward()

            torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)
            optimizer.step()
            scheduler.step()
            optimizer.zero_grad()

        # 3. Validation
        model.eval()
        val_loss = 0
        correct_predictions = 0
        with torch.no_grad():
            for batch in val_dataloader:
                input_ids = batch['input_ids'].to(device)
                attention_mask = batch['attention_mask'].to(device)
                labels = batch['labels'].to(device)

                outputs = model(input_ids, attention_mask=attention_mask, labels=labels)
                loss = outputs.loss
                val_loss += loss.item()

                preds = torch.argmax(outputs.logits, dim=1)
                correct_predictions += torch.sum(preds == labels)

        val_accuracy = correct_predictions.double() / len(val_dataloader.dataset)
        print(f"Epoch {epoch+1}/{num_epochs}")
        print(f"Validation Loss: {val_loss/len(val_dataloader):.4f}")
        print(f"Validation Accuracy: {val_accuracy:.4f}")

def main():
    # 4. 데이터 준비 (실제 데이터로 대체 필요)
    texts = ["이것은 시입니다", "이것은 노래 가사입니다", "이것은 소설의 일부입니다", "이것은 미래 계획입니다"]
    labels = [0, 1, 2, 3]  # 0: 시, 1: 음악, 2: 소설, 3: 미래 계획

    # 5. 데이터 분할하는 코드 ( 0.8 )
    train_texts, val_texts, train_labels, val_labels = train_test_split(texts, labels, test_size=0.2)

    # 6. 토크나이저 로드 + 모델 로드
    tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
    model = AutoModelForSequenceClassification.from_pretrained(MODEL_NAME, num_labels=4)

    # 7. 훈련 데이터 세트 생성 + 검증 데이터 세트 생성
    train_dataset = TextClassificationDataset(train_texts, train_labels, tokenizer, max_length=128)
    val_dataset = TextClassificationDataset(val_texts, val_labels, tokenizer, max_length=128)

    train_dataloader = DataLoader(train_dataset, batch_size=16, shuffle=True)
    val_dataloader = DataLoader(val_dataset, batch_size=16)

    # 8. 학습 ( device cuda )
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model.to(device)
    train(model, train_dataloader, val_dataloader, device)

    # 9. 모델 저장하는 코드 ( 현재 저장 공간에 )
    model.save_pretrained("./finetuned_gemma_model")
    tokenizer.save_pretrained("./finetuned_gemma_model")

# 10. if __name__ == "__main__":
if __name__ == "__main__":
    main()
